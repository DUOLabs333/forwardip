#! /usr/bin/env python

#Map a new ip $FROM to an existing ip $TO

#For Darwin, pfctl rules won't work on that machine, but will apply to all other machines. It is not clear why.
import sys
import os,subprocess
import signal
from threading import Event
PLATFORM=os.uname().sysname

FROM=sys.argv[1]

TO=sys.argv[2]

if len(sys.argv)<=3:
    NETIF="lo0"
else:
    NETIF="en0"

def command(command,stdin=None):
	return subprocess.run(command,input=stdin,text=True,capture_output=True).stdout

def delete_rules():
	if PLATFORM=='Linux':
		for chain in ["PREROUTING","OUTPUT"]:
			rules=[_.split() for _ in os.popen(f"""sudo iptables -L {chain} -v -n -t nat --line-number""").read().splitlines()]
			rules=[_ for _ in rules  if len(_)>=10 and _[9]==FROM ]
			for _ in rules:
				os.system(f"sudo iptables -t nat -D {chain} -d {_[9]} -j DNAT --to-destination {_[10].split('to:')[1]}")
	elif PLATFORM=='Darwin':
		os.system(f"sudo ifconfig {NETIF} -alias {FROM}")
		rules=os.popen('sudo pfctl -sn -q').read()
		rules=rules.splitlines()
		rules='\n'.join([_ for _ in rules if f'to {FROM} port 1:8021' not in _])
		command(["sudo","pfctl","-Nf","-"],stdin=rules)

def Exit(signum,frame):
	delete_rules()
	exit()
#Move to subprocess with stdin
signal.signal(signal.SIGTERM,Exit)
signal.signal(signal.SIGINT,Exit)

rulesets=["queue","nat","rules"]
def make_rule():
	delete_rules()
	if PLATFORM=='Linux':
		os.system(f"""
			sudo sysctl -w net.ipv4.conf.all.route_localnet=1
			sudo sysctl -w net.ipv4.ip_forward=1
			sudo iptables -t nat -A OUTPUT -d {FROM} -j DNAT --to-destination {TO}
			sudo iptables -t nat -A  PREROUTING -d {FROM} -j DNAT --to-destination {TO}
		""")
	elif PLATFORM=='Darwin':
		#Apparently, if internet-sharing is enabled, for this to work on your own computer, you must flush that table first
		rules=[]
		for ruleset in ["queue","nat","rules"]:
			rules.append(command(["sudo","pfctl","-s",ruleset,"-q"]))

		os.system("sudo pfctl -F all")
		for i,ruleset in enumerate(rulesets):
			merge_option='m' if ruleset=="queue" else ruleset[0].upper()
			command(["sudo","pfctl",f"-{merge_option}f","-"],stdin=rules[i])

		rules=os.popen('sudo pfctl -sn -q').read()+f'\nrdr pass inet proto {{tcp, udp}} to {FROM} port 1:8021 -> {TO}'

		os.system(f"""
		sudo sysctl -w net.inet.ip.forwarding=1
		sudo ifconfig {NETIF} alias {FROM}
		"""
		)
		command(["sudo","pfctl","-eNf","-"],stdin=rules)
make_rule()

Event().wait()
