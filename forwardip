#! /usr/bin/env python

#Map a new ip $FROM to an existing ip $TO
import sys
import os
import signal
from threading import Event
PLATFORM=os.uname().sysname

FROM=sys.argv[1]

TO=sys.argv[2]
def delete_rules():
	if PLATFORM=='Linux':
		for chain in ["PREROUTING","OUTPUT"]:
			rules=[_.split() for _ in os.popen(f"""sudo iptables -L {chain} -v -n -t nat --line-number""").read().splitlines()]
			rules=[_ for _ in rules  if len(_)>=10 and _[9]==FROM ]
			for _ in rules:
				os.system(f"sudo iptables -t nat -D {chain} -d {_[9]} -j DNAT --to-destination {_[10].split('to:')[1]}")
	elif PLATFORM=='Darwin':
		os.system(f"sudo ifconfig lo0 -alias {FROM}")
		rules=os.popen('sudo pfctl -sr -q').read()+'\n'+os.popen('sudo pfctl -sn -q').read()+f'\nrdr pass inet proto {{tcp, udp}} to {FROM} port 1:8021 -> {TO}'
		for proto in ["tcp","udp"]:
			rules=rules.replace(f"rdr pass inet proto {proto} to {FROM} port 1:8021 -> {TO}","")
		os.system(f"""echo "{rules}" | sudo pfctl -f -""")

def Exit(signum,frame):
	delete_rules()
	exit()

signal.signal(signal.SIGTERM,Exit)
signal.signal(signal.SIGINT,Exit)
def make_rule():
	delete_rules()
	if PLATFORM=='Linux':
		os.system(f"""
			sudo sysctl -w net.ipv4.conf.all.route_localnet=1
			sudo sysctl -w net.ipv4.ip_forward=1
			sudo iptables -t nat -A OUTPUT -d {FROM} -j DNAT --to-destination {TO}
			sudo iptables -t nat -A  PREROUTING -d {FROM} -j DNAT --to-destination {TO}
		""")
	elif PLATFORM=='Darwin':
		rules=os.popen('sudo pfctl -sr -q').read()+'\n'+os.popen('sudo pfctl -sn -q').read()+f'\nrdr pass inet proto {{tcp, udp}} to {FROM} port 1:8021 -> {TO}'
		os.system(f"""
		sudo sysctl -w net.inet.ip.forwarding=1
		sudo ifconfig lo0 alias {FROM}
		echo "{rules}" | sudo pfctl -ef - 
		""")
make_rule()

Event().wait()
